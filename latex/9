113292475659649136992	1432556556847	Initialise UMI	\\section{Introduction}\n\nIn order to write formal mathematics, and thus mathematics that a computer can check, one must first have a basic understanding of Predicate Calculus.\nThis is much less scary than it may seem because all you will need to understand is the basic syntax and structure.\nDo not worry, you will not need to understand the many Theorems and proofs associated with Predicate Calculus and formal logic.\n\\par\nYou need to understand what a Term, Variable and Well Formed Formula is, what a predicate is, etc,\nand to know these things all you really need to do is read the \\href{https://en.wikipedia.org/wiki/First-order_logic#Syntax}{Syntax section of the wikipedia page}.\n\n\\section{Supported Languages / Non-Logical Symbols}\n\nNow you have read a section or two on Predicate Calculus from wikipedia, and are therefore a world leading expert, \nyou should now understand the distinction between logical and non-logical symbols.\nYou should have observed that many symbols that under many axiomatisations are considered somewhat primitive are not included in the core of Predicate Calculus but a supplemented via a set of non-logical symbols - also known as a {\\bf Language}.\nFor example $\\in$ and $+$ are non-logical symbols for the languages of Set Theory and Peano Arithmetic respectively.\n\\par\nNow we intend on providing the functionality so that users can create their own Languages but at the moment only Set Theory is supported.  So users can use the predicate $\\in(x, y)$, \nand via {\\id=2 Set Membership Infix Notation} they can use $x \\in y$ to mean the same thing.\nWhen we have the feature to add your own languages then users will essentially be able to use any foundation of mathematics they like,\nlike Lambda Calculus, Category Theory, Martin Loff Dependent Type Theory (my personal favorite), and other less complete \"foundations\" like Peano Arithmetic, etc.\n\\par\nSince Set Theory is usually no longer taught at school level in favor of applied mathematics unfortunately contributing formal content \nmay currently be quite difficult for school level students until at least numbers and things like addition and subtraction have been defined in terms of sets. \n\n\\section{Currently Supported Content Types}\n\nCurrently we allow the submission of Notation, Definitions and Axioms.  When we finish implementing the proof checker we will add all the other types of mathematical information.\n\n\\section{Formal Axioms}\n\nAxioms are probably the easiest content to define as the only requirement is that the statement is grammatically correct and is a full sentence.\nFor a statement to be grammatically correct it needs to be a Well Formed Formula and/or be based on some previous definitions / notation.\nRemember to add the prerequisite definitions in the \"Prerequisite definitions\" field (see the below section on dependencies for more information).\nA simple example of an Axiom is {\\id=7 Empty Set Exists Axiom}.\n\n\\section{Formal Notation}\n\nWhen you introduce notation you need to first declare the variables, terms and well formed formulas that will be used in the definition. To this first list the variables in the form $\\forall x \\forall y \\forall fred \\forall etc$, \nthen declare the type, that is either, $\\text{Var}$ for variable, $\\text{Term}$ for terms and $\\text{Wff}$ for well formed formulas, in the form of conjunctions. Then you use the $\\rightarrow$ symbol, \nthen you declare the notation using the $:=$ predicate (you can use $:=$ in infix notation style if you have {\\id=0 Alias Alias} as a dependency))\n\\par\nA good simple example is {\\id=8 Set Intersection}, that is the $\\cap$ symbol. (Remember you can right click on maths to view the LaTeX).\n\n\\section{Definitions}\n\nDefinitions are largely the same as notation except in notation is defined as a means to substitute terms whereas definitions are for substituting well formed formulas. A good example of a Definition is {\\id=1 If and Only If}. \n\n\\section{Dependencies}\n\nAt the moment for dependencies, i.e. prerequisite definitions and notations, the following should be noted:\n\n\\begin{enumerate}\n\\item Evaluation order is not currently specified (it's a bit of luck whether they will be in the order you want).\nThis is going to be fixed soon. For example if you defined $-$ and $+$ you cannot necessarily control their evaluation order at the moment and so you may have to use brackets.\n\\item A topological sort is automatically performed to pull in all transitive dependencies.\nFor example, suppose you add the prerequisite {\\id=4 Empty Set}, well this depends on {\\id=3 Set Builder Notation}, so it will automatically be imported. \nThis means you can use {\\id=3 Set Builder Notation} even though you have not imported it.\n\\item Try to avoid conflicting definitions / notation, that is where if both where imported it would be possible that both could apply to a particular string.\nAt the moment this is not automatically checked, but should be in future.*\n\\end{enumerate}\n\n*In fact in future we intend on adding a feature that will automatically \"shade\" conflicting definitions, for example suppose in one context you define $+$ to be on integers, then in another context you define it to be on vectors it might cause issues.\nSo our feature will automatically call one $+$ something different, e.g. $+_1$.  Other approaches we may adopt could include implicit typing for functions and predicates, but that would be even harder to implement.
113292475659649136992	1445702863288	Initialise UMI	@@ -48,1 +48,1 @@\n-\\section{Dependencies}\n+\\section{Notational Conflicts}\n@@ -50,14 +50,1 @@\n-At the moment for dependencies, i.e. prerequisite definitions and notations, the following should be noted:\n-\n-\\begin{enumerate}\n-\\item Evaluation order is not currently specified (it's a bit of luck whether they will be in the order you want).\n-This is going to be fixed soon. For example if you defined $-$ and $+$ you cannot necessarily control their evaluation order at the moment and so you may have to use brackets.\n-\\item A topological sort is automatically performed to pull in all transitive dependencies.\n-For example, suppose you add the prerequisite {\\id=4 Empty Set}, well this depends on {\\id=3 Set Builder Notation}, so it will automatically be imported. \n-This means you can use {\\id=3 Set Builder Notation} even though you have not imported it.\n-\\item Try to avoid conflicting definitions / notation, that is where if both where imported it would be possible that both could apply to a particular string.\n-At the moment this is not automatically checked, but should be in future.*\n-\\end{enumerate}\n-\n-*In fact in future we intend on adding a feature that will automatically \"shade\" conflicting definitions, for example suppose in one context you define $+$ to be on integers, then in another context you define it to be on vectors it might cause issues.\n-So our feature will automatically call one $+$ something different, e.g. $+_1$.  Other approaches we may adopt could include implicit typing for functions and predicates, but that would be even harder to implement.\n+At the moment try to avoid defining identical notational patterns, for example defining $+$ on both numbers and vectors.  This is because we have not yet fully implemented a type system that can resolve the ambiguity.
113292475659649136992	1445703160524	Initialise UMI	@@ -46,1 +46,1 @@\n-Definitions are largely the same as notation except in notation is defined as a means to substitute terms whereas definitions are for substituting well formed formulas. A good example of a Definition is {\\id=1 If and Only If}. \n+Definitions are largely the same as notation except notation is a means to substitute terms whereas definitions are for substituting well formed formulas. A good example of a Definition is {\\id=1 If and Only If}, an example of notation is the {\\id=4 Empty Set}.
113292475659649136992	1445703417418	Initialise UMI	@@ -48,0 +48,3 @@\n+Currently definitions require quotes since we reuse the $:=$ symbol, which is technically a {\\it meta predicate}, that is a predicate about statements.  \n+The quotes are required to make a distinction between the object language and the meta language.  In future we will add a language feature that allows one to use the phrase 'if and only if', which will then \"auto-insert\" the quotes.\n+
113292475659649136992	1445727078706	Initialise UMI	@@ -10,0 +10,10 @@\n+\\section{Assumed Knowledge}\n+\n+It is assumed the user has some basic familiarity with LaTeX, fortunately thanks to this and the following tools, becoming familiar with LaTeX enough to have fun with our site ought to take only a couple of hours.\n+\n+\\begin{itemize}\n+\\item \\href{https://www.codecogs.com/latex/eqneditor.php}{Great tool for understanding basic maths symbols}\n+\\item \\href{http://detexify.kirelabs.org/classify.html}{Great tool for finding basic maths symbols}\n+\\item \\href{https://www.overleaf.com/}{Great tool for also learning textmode macros}. Unfortunately this one requires you to create an account and the UX has been obfuscated since a recent redesign.  Once you have created an account you need to click \"Create Project\", then \"Sample Document\".\n+\\end{itemize}\n+
113292475659649136992	1451657026940	Initialise UMI	@@ -37,1 +37,3 @@\n-Currently we allow the submission of Notation, Definitions and Axioms.  When we finish implementing the proof checker we will add all the other types of mathematical information.\n+Currently we allow the submission of Notation, Definitions, Axioms, Logical Axioms, Axiom Schemas, Logical Axiom Schemas, Proofs and Meta Proofs (which in turn create Theorems and Meta Theorems).  \n+Depending on your \"role\", that is your permissions levels, will determine what you can actually submit (though you can play around with any of these).  \n+We have nearly finished writing the proof checker for full predicate calculus, but currently we only support the use of propositional logic in proofs.\\par\n@@ -39,1 +41,1 @@\n-\\section{Formal Axioms}\n+For specific documentation on how to add each of the types see:\\par\n@@ -41,23 +43,1 @@\n-Axioms are probably the easiest content to define as the only requirement is that the statement is grammatically correct and is a full sentence.\n-For a statement to be grammatically correct it needs to be a Well Formed Formula and/or be based on some previous definitions / notation.\n-Remember to add the prerequisite definitions in the \"Prerequisite definitions\" field (see the below section on dependencies for more information).\n-A simple example of an Axiom is {\\id=7 Empty Set Exists Axiom}.\n-\n-\\section{Formal Notation}\n-\n-When you introduce notation you need to first declare the variables, terms and well formed formulas that will be used in the definition. To this first list the variables in the form $\\forall x \\forall y \\forall fred \\forall etc$, \n-then declare the type, that is either, $\\text{Var}$ for variable, $\\text{Term}$ for terms and $\\text{Wff}$ for well formed formulas, in the form of conjunctions. Then you use the $\\rightarrow$ symbol, \n-then you declare the notation using the $:=$ predicate (you can use $:=$ in infix notation style if you have {\\id=0 Alias Alias} as a dependency))\n-\\par\n-A good simple example is {\\id=8 Set Intersection}, that is the $\\cap$ symbol. (Remember you can right click on maths to view the LaTeX).\n-\n-\\section{Definitions}\n-\n-Definitions are largely the same as notation except notation is a means to substitute terms whereas definitions are for substituting well formed formulas. A good example of a Definition is {\\id=1 If and Only If}, an example of notation is the {\\id=4 Empty Set}.\n-\n-Currently definitions require quotes since we reuse the $:=$ symbol, which is technically a {\\it meta predicate}, that is a predicate about statements.  \n-The quotes are required to make a distinction between the object language and the meta language.  In future we will add a language feature that allows one to use the phrase 'if and only if', which will then \"auto-insert\" the quotes.\n-\n-\\section{Notational Conflicts}\n-\n-At the moment try to avoid defining identical notational patterns, for example defining $+$ on both numbers and vectors.  This is because we have not yet fully implemented a type system that can resolve the ambiguity.\n+{\\id=p How to Write a Formal Proof}.
113292475659649136992	1451657429718	Initialise UMI	@@ -43,1 +43,3 @@\n-{\\id=p How to Write a Formal Proof}.\n+{\\id=t How to Write Formal Notation}\\par\n+{\\id=u How to Write a Formal Definitions}\\par\n+{\\id=p How to Write a Formal Proof}
113292475659649136992	1454770732920	Initialise UMI	@@ -41,0 +41,6 @@\n+\\section{Difference Between a Notation and a Definition}\n+\n+OpenMaths makes a distinction between Formal Notation and Formal Definitions.  \n+We reserve the content type {\\bf Notation} for the introduction of syntax for {\\it terms}, for example {\\id=8 Set Intersection} is Formal Notation because $x \\cap y$ is a term (a thing) not a formula (a statement).  \n+We reserve the type {\\bf Definition} for the introduction of syntax for {\\it formulas}, for example {\\id=l subset} is a definition because it's the statement \"$x$ is a subset of $y$\".\\par\n+
