113292475659649136992	1451665093095	Initialise UMI	The biggest challenge to designing the language so that any valid natural mathematical sentence can some day be checked by a computer is to build in completely unrestricted means of introducing notation, definitions and patterns of proof.  \nNatural mathematics often switches from technically \"meta\" mathematics, like the Axiom Schema of Specification or introducing some notation, and use of that Schema or notation.  \nThis means that the unrestricted introduction of abstraction also needs to be possible at a meta-level too.\\par\n\nTo solve the first problem we provide a native meta-mathematical language for the introduction of abstractions via macros where those macros are inferred in the same way humans infer what is new syntax. \nA nice example of this is {\\id=3 Set Builder Notation}, in this example the native constructs are $\\text{Wff}$, $\\text{Wff}$ and $\\{ \\_ \\text{ where } \\_$.  \nThe macro is $\\{ x | \\phi \\}$, note how escaping is not required and using this macro doesn't require any extra syntax (just add it to the prerequisites). \nThis macro system is a little like the language Lisp, except in lisp huge reams of parenthesis are needed to both define and use macros.\\par\n   \nNow to solve the second problem we allow meta-mathematical macros using the same native notation.  \nAn example of this is the alias for the native symbol $:=$, that is we need not write $:=(x, y)$ we can write $x := y$.\nThis means if you would prefer to write the definition of set builder notation like this:\\par\n\n$\\text{for any formula } \\phi, \\text{ for any variable } x, \\text{ we write } ...$\\par\n\n\n\nTODO more
113292475659649136992	1451741667795	Initialise UMI	@@ -1,18 +1,1 @@\n-The biggest challenge to designing the language so that any valid natural mathematical sentence can some day be checked by a computer is to build in completely unrestricted means of introducing notation, definitions and patterns of proof.  \n-Natural mathematics often switches from technically \"meta\" mathematics, like the Axiom Schema of Specification or introducing some notation, and use of that Schema or notation.  \n-This means that the unrestricted introduction of abstraction also needs to be possible at a meta-level too.\\par\n-\n-To solve the first problem we provide a native meta-mathematical language for the introduction of abstractions via macros where those macros are inferred in the same way humans infer what is new syntax. \n-A nice example of this is {\\id=3 Set Builder Notation}, in this example the native constructs are $\\text{Wff}$, $\\text{Wff}$ and $\\{ \\_ \\text{ where } \\_$.  \n-The macro is $\\{ x | \\phi \\}$, note how escaping is not required and using this macro doesn't require any extra syntax (just add it to the prerequisites). \n-This macro system is a little like the language Lisp, except in lisp huge reams of parenthesis are needed to both define and use macros.\\par\n-   \n-Now to solve the second problem we allow meta-mathematical macros using the same native notation.  \n-An example of this is the alias for the native symbol $:=$, that is we need not write $:=(x, y)$ we can write $x := y$.\n-This means if you would prefer to write the definition of set builder notation like this:\\par\n-\n-$\\text{for any formula } \\phi, \\text{ for any variable } x, \\text{ we write } ...$\\par\n-\n-\n-\n-TODO more\n+DELETED
